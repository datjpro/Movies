@model MoviesApp.Models.TapPhim
@{
    ViewData["Title"] = $"{Model.TenTap} - {Model.Phim.TenPhim}";
    var hlsUrl = ViewBag.HLSUrl as string;
    var mp4Url = ViewBag.MP4Url as string;
}

<div class="container-fluid">
    <div class="row">
        <!-- Video Player -->
        <div class="col-lg-8">
            <div class="card mb-4">
                <div class="card-body p-0">
                    <!-- Video Container -->
                    <div class="video-container">
                        <video id="videoPlayer" class="video-js vjs-default-skin" 
                               controls preload="auto" width="100%" height="500"
                               data-setup='{"fluid": true, "responsive": true}'>
                            <p class="vjs-no-js">
                                Để xem video này, vui lòng 
                                <a href="https://videojs.com/html5-video-support/" target="_blank">
                                    bật JavaScript
                                </a> và cập nhật trình duyệt hỗ trợ 
                                <a href="https://videojs.com/html5-video-support/" target="_blank">
                                    HTML5 video
                                </a>.
                            </p>
                        </video>
                    </div>

                    <!-- Video Controls -->
                    <div class="p-3 bg-light border-top">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <h5 class="mb-1">@Model.TenTap</h5>
                                <small class="text-muted">
                                    @Model.Phim.TenPhim - Tập @Model.SoTapThuTu
                                </small>
                            </div>
                            <div class="col-md-6 text-end">
                                <div class="btn-group" role="group">
                                    <button type="button" class="btn btn-outline-primary btn-sm" 
                                            onclick="switchToMP4()">
                                        <i class="fas fa-play"></i> MP4
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary btn-sm" 
                                            onclick="switchToHLS()">
                                        <i class="fas fa-stream"></i> HLS
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Episode Info & Controls -->
        <div class="col-lg-4">
            <!-- Episode Details -->
            <div class="card mb-4">
                <div class="card-header">
                    <h6><i class="fas fa-info-circle"></i> Thông Tin Tập Phim</h6>
                </div>
                <div class="card-body">
                    <div class="row mb-2">
                        <div class="col-sm-4"><strong>Tập số:</strong></div>
                        <div class="col-sm-8">@Model.SoTapThuTu</div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-sm-4"><strong>Tên tập:</strong></div>
                        <div class="col-sm-8">@Model.TenTap</div>
                    </div>
                    @if (Model.ThoiLuongTap.HasValue)
                    {
                        <div class="row mb-2">
                            <div class="col-sm-4"><strong>Thời lượng:</strong></div>
                            <div class="col-sm-8">@Model.ThoiLuongTap phút</div>
                        </div>
                    }
                    <div class="row mb-2">
                        <div class="col-sm-4"><strong>Trạng thái:</strong></div>
                        <div class="col-sm-8">
                            <span class="badge bg-@(Model.VideoStatus == "ready" ? "success" : Model.VideoStatus == "processing" ? "warning" : "secondary")">
                                @(Model.VideoStatus == "ready" ? "Sẵn sàng" : 
                                  Model.VideoStatus == "processing" ? "Đang xử lý" : 
                                  Model.VideoStatus ?? "Không xác định")
                            </span>
                        </div>
                    </div>
                    @if (Model.VideoFileSize.HasValue)
                    {
                        <div class="row mb-2">
                            <div class="col-sm-4"><strong>Kích thước:</strong></div>
                            <div class="col-sm-8">@(Math.Round(Model.VideoFileSize.Value / (1024.0 * 1024.0), 2)) MB</div>
                        </div>
                    }
                    <div class="row mb-2">
                        <div class="col-sm-4"><strong>Định dạng:</strong></div>
                        <div class="col-sm-8">@(Model.VideoFormat ?? "MP4")</div>
                    </div>
                </div>
            </div>

            <!-- Movie Info -->
            <div class="card mb-4">
                <div class="card-header">
                    <h6><i class="fas fa-film"></i> Về Bộ Phim</h6>
                </div>
                <div class="card-body">
                    <div class="text-center mb-3">                        <img src="@Model.Phim.AnhPhim" alt="@Model.Phim.TenPhim" 
                             class="img-fluid rounded" style="max-height: 200px;">
                    </div>
                    <h6>@Model.Phim.TenPhim</h6>
                    <p class="text-muted small">@Model.Phim.MoTa</p>
                    
                    <div class="row text-center">
                        <div class="col-6">
                            <small class="text-muted">Năm phát hành</small>
                            <div><strong>@Model.Phim.NamPhatHanh</strong></div>
                        </div>
                        <div class="col-6">
                            <small class="text-muted">Đánh giá</small>
                            <div><strong>@(Model.Phim.DiemImdb?.ToString("F1") ?? "N/A")</strong></div>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <a href="@Url.Action("Details", "Phim", new { id = Model.MaPhim })" 
                           class="btn btn-outline-primary btn-sm w-100">
                            <i class="fas fa-eye"></i> Xem chi tiết phim
                        </a>
                    </div>
                </div>
            </div>

            <!-- Other Episodes -->
            @if (Model.Phim.TapPhims?.Any() == true)
            {
                <div class="card">
                    <div class="card-header">
                        <h6><i class="fas fa-list"></i> Các Tập Khác</h6>
                    </div>
                    <div class="card-body p-0">
                        <div class="list-group list-group-flush" style="max-height: 300px; overflow-y: auto;">
                            @foreach (var tap in Model.Phim.TapPhims.OrderBy(t => t.SoTapThuTu))
                            {
                                <a href="@Url.Action("Play", new { id = tap.MaTap })" 
                                   class="list-group-item list-group-item-action @(tap.MaTap == Model.MaTap ? "active" : "")">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div>
                                            <h6 class="mb-1">Tập @tap.SoTapThuTu</h6>
                                            <small>@tap.TenTap</small>
                                        </div>
                                        <span class="badge bg-@(tap.VideoStatus == "ready" ? "success" : tap.VideoStatus == "processing" ? "warning" : "secondary") rounded-pill">
                                            @(tap.VideoStatus == "ready" ? "✓" : tap.VideoStatus == "processing" ? "⏳" : "?")
                                        </span>
                                    </div>
                                </a>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
<!-- Video.js -->
<link href="https://vjs.zencdn.net/8.6.1/video-js.css" rel="stylesheet">
<script src="https://vjs.zencdn.net/8.6.1/video.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>

<script>
let player;
let hlsPlayer;

$(document).ready(function() {
    initializeVideoPlayer();
    
    // Auto-check video status if processing
    @if (Model.VideoStatus == "processing")
    {
        <text>
        checkVideoStatus();
        </text>
    }
});

function initializeVideoPlayer() {
    // Initialize Video.js player
    player = videojs('videoPlayer', {
        fluid: true,
        responsive: true,
        controls: true,
        preload: 'auto'
    });

    // Try MP4 first, fallback to HLS
    @if (!string.IsNullOrEmpty(mp4Url))
    {
        <text>
        loadMP4Video();
        </text>
    }
    else if (!string.IsNullOrEmpty(hlsUrl))
    {
        <text>
        loadHLSVideo();
        </text>
    }
    else
    {
        <text>
        player.ready(function() {
            player.trigger('error', { message: 'Video chưa sẵn sàng. Vui lòng thử lại sau.' });
        });
        </text>
    }
}

function loadMP4Video() {
    if (player) {
        player.src({
            src: '@Html.Raw(mp4Url)',
            type: 'video/mp4'
        });
        
        player.ready(function() {
            console.log('MP4 video loaded');
        });
        
        player.on('error', function() {
            console.log('MP4 failed, trying HLS...');
            loadHLSVideo();
        });
    }
}

function loadHLSVideo() {
    @if (!string.IsNullOrEmpty(hlsUrl))
    {
        <text>
        if (Hls.isSupported()) {
            const video = document.getElementById('videoPlayer_html5_api');
            if (hlsPlayer) {
                hlsPlayer.destroy();
            }
            
            hlsPlayer = new Hls();
            hlsPlayer.loadSource('@Html.Raw(hlsUrl)');
            hlsPlayer.attachMedia(video);
            
            hlsPlayer.on(Hls.Events.MANIFEST_PARSED, function() {
                console.log('HLS video loaded');
            });
            
            hlsPlayer.on(Hls.Events.ERROR, function(event, data) {
                console.error('HLS error:', data);
                player.trigger('error', { message: 'Lỗi phát video HLS: ' + data.details });
            });
        } else if (player.canPlayType('application/vnd.apple.mpegurl')) {
            // Safari native HLS support
            player.src({
                src: '@Html.Raw(hlsUrl)',
                type: 'application/vnd.apple.mpegurl'
            });
        } else {
            player.trigger('error', { message: 'Trình duyệt không hỗ trợ HLS streaming' });
        }
        </text>
    }
    else
    {
        <text>
        player.trigger('error', { message: 'URL HLS không khả dụng' });
        </text>
    }
}

function switchToMP4() {
    @if (!string.IsNullOrEmpty(mp4Url))
    {
        <text>
        if (hlsPlayer) {
            hlsPlayer.destroy();
            hlsPlayer = null;
        }
        loadMP4Video();
        </text>
    }
    else
    {
        <text>
        alert('URL MP4 không khả dụng');
        </text>
    }
}

function switchToHLS() {
    loadHLSVideo();
}

function checkVideoStatus() {
    @if (!string.IsNullOrEmpty(Model.VideoId))
    {
        <text>
        $.get('@Url.Action("CheckVideoStatus")', { videoId: '@Model.VideoId' })
            .done(function(data) {
                if (data.success && data.status === 'ready') {
                    // Reload page if video is now ready
                    location.reload();
                } else if (data.status === 'processing') {
                    // Check again in 10 seconds
                    setTimeout(checkVideoStatus, 10000);
                }
            })
            .fail(function() {
                console.error('Failed to check video status');
            });
        </text>
    }
}

// Cleanup on page unload
$(window).on('beforeunload', function() {
    if (player) {
        player.dispose();
    }
    if (hlsPlayer) {
        hlsPlayer.destroy();
    }
});
</script>
}

@section Styles {
<style>
    .video-container {
        position: relative;
        background: #000;
    }
    
    .video-js {
        width: 100% !important;
        height: 500px !important;
    }
    
    .list-group-item.active {
        background-color: var(--bs-primary);
        border-color: var(--bs-primary);
    }
    
    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }
    
    @@media (max-width: 768px) {
        .video-js {
            height: 250px !important;
        }
    }
</style>
}
