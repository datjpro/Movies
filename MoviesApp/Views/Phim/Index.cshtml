@model IEnumerable<MoviesApp.Models.Phim>
@{
    ViewData["Title"] = "Danh s√°ch phim";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    :root {
        --primary-color: #6366f1;
        --primary-dark: #4f46e5;
        --secondary-color: #10b981;
        --accent-color: #f59e0b;
        --bg-primary: #0f0f23;
        --bg-secondary: #1a1a2e;
        --bg-tertiary: #16213e;
        --text-primary: #ffffff;
        --text-secondary: #e2e8f0;
        --text-muted: #94a3b8;
        --border-color: #334155;
        --shadow-light: rgba(99, 102, 241, 0.1);
        --shadow-medium: rgba(0, 0, 0, 0.5);
        --glass-bg: rgba(255, 255, 255, 0.08);
        --glass-border: rgba(255, 255, 255, 0.15);
    }

    body {
        background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-secondary) 100%);
        color: var(--text-primary);
        min-height: 100vh;
    }

    .movies-container {
        background: var(--bg-primary);
        min-height: 100vh;
        padding-top: 2rem;
    }

    .movies-header {
        background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
        padding: 3rem 0;
        margin-bottom: 2rem;
        border-radius: 0 0 2rem 2rem;
        position: relative;
        overflow: hidden;
    }

    .movies-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="20" cy="20" r="2" fill="rgba(255,255,255,0.1)"/><circle cx="80" cy="80" r="2" fill="rgba(255,255,255,0.1)"/><circle cx="40" cy="60" r="1" fill="rgba(255,255,255,0.1)"/></svg>');
        animation: float 20s ease-in-out infinite;
    }

    @@keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-20px) rotate(180deg); }
    }

    .movies-header h1 {
        font-size: 3rem;
        font-weight: 700;
        margin: 0;
        color: white;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        position: relative;
        z-index: 1;
    }

    .movies-header p {
        font-size: 1.2rem;
        margin: 0.5rem 0 0 0;
        color: rgba(255,255,255,0.9);
        position: relative;
        z-index: 1;
    }

    .search-filter-section {
        background: var(--glass-bg);
        backdrop-filter: blur(10px);
        border: 1px solid var(--glass-border);
        border-radius: 1rem;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 8px 32px var(--shadow-medium);
    }

    .search-box {
        position: relative;
        margin-bottom: 1.5rem;
    }

    .search-input {
        width: 100%;
        padding: 1rem 1rem 1rem 3rem;
        border: 2px solid var(--border-color);
        border-radius: 0.75rem;
        background: var(--bg-tertiary);
        color: var(--text-primary);
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .search-input:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px var(--shadow-light);
        background: var(--bg-secondary);
    }

    .search-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--text-muted);
        font-size: 1.2rem;
    }

    .filter-row {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .filter-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: var(--text-secondary);
        font-weight: 500;
    }

    .filter-select {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid var(--border-color);
        border-radius: 0.5rem;
        background: var(--bg-tertiary);
        color: var(--text-primary);
        font-size: 1rem;
        transition: all 0.3s ease;
    }

    .filter-select:focus {
        outline: none;
        border-color: var(--primary-color);
        box-shadow: 0 0 0 3px var(--shadow-light);
    }

    .filter-select option {
        background: var(--bg-tertiary);
        color: var(--text-primary);
    }

    .btn-search {
        background: linear-gradient(45deg, var(--primary-color), var(--primary-dark));
        color: white;
        border: none;
        padding: 0.75rem 2rem;
        border-radius: 0.75rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px var(--shadow-light);
    }

    .btn-search:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px var(--shadow-light);
    }

    .stats-section {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: var(--glass-bg);
        backdrop-filter: blur(10px);
        border: 1px solid var(--glass-border);
        border-radius: 1rem;
        padding: 1.5rem;
        text-align: center;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px var(--shadow-medium);
    }

    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 12px 30px var(--shadow-medium);
    }

    .stat-number {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 0.5rem;
    }

    .stat-label {
        color: var(--text-secondary);
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .movies-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 2rem;
        margin-bottom: 3rem;
    }    .movie-card {
        background: var(--glass-bg);
        backdrop-filter: blur(10px);
        border: 1px solid var(--glass-border);
        border-radius: 1rem;
        overflow: hidden;
        transition: all 0.3s ease;
        box-shadow: 0 8px 25px var(--shadow-medium);
        position: relative;
        cursor: pointer;
    }

    .movie-card:hover {
        transform: translateY(-10px) scale(1.02);
        box-shadow: 0 20px 40px var(--shadow-medium);
        border-color: var(--primary-color);
    }

    .movie-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(45deg, transparent, rgba(99, 102, 241, 0.03));
        opacity: 0;
        transition: opacity 0.3s ease;
        pointer-events: none;
        z-index: 1;
    }

    .movie-card:hover::before {
        opacity: 1;
    }

    .movie-poster {
        position: relative;
        width: 100%;
        height: 300px;
        overflow: hidden;
    }

    .movie-poster img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .movie-card:hover .movie-poster img {
        transform: scale(1.1);
    }

    .movie-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(to bottom, transparent, rgba(0,0,0,0.8));
        opacity: 0;
        transition: opacity 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .movie-card:hover .movie-overlay {
        opacity: 1;
    }    .play-button {
        background: var(--primary-color);
        color: white;
        border: none;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        font-size: 1.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px var(--shadow-light);
        position: relative;
        z-index: 2;
    }

    .play-button:hover {
        background: var(--primary-dark);
        transform: scale(1.1);
    }    .movie-info {
        padding: 1.5rem;
        position: relative;
        z-index: 2;
    }

    .movie-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
        line-height: 1.4;
    }

    .movie-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
        font-size: 0.9rem;
        color: var(--text-muted);
    }

    .movie-year {
        background: var(--primary-color);
        color: white;
        padding: 0.25rem 0.75rem;
        border-radius: 1rem;
        font-size: 0.8rem;
        font-weight: 500;
    }

    .movie-rating {
        display: flex;
        align-items: center;
        gap: 0.25rem;
    }

    .movie-description {
        color: var(--text-secondary);
        font-size: 0.9rem;
        line-height: 1.5;
        margin-bottom: 1rem;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }    .movie-actions {
        display: flex;
        gap: 0.5rem;
        position: relative;
        z-index: 2;
    }

    .btn-watch, .btn-details {
        flex: 1;
        padding: 0.75rem;
        border: none;
        border-radius: 0.5rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
        text-align: center;
        display: inline-block;
        position: relative;
        z-index: 2;
    }

    .btn-watch {
        background: var(--primary-color);
        color: white;
    }

    .btn-watch:hover {
        background: var(--primary-dark);
        transform: translateY(-2px);
        color: white;
        text-decoration: none;
    }

    .btn-details {
        background: var(--bg-tertiary);
        color: var(--text-secondary);
        border: 1px solid var(--border-color);
    }

    .btn-details:hover {
        background: var(--bg-secondary);
        color: var(--text-primary);
        text-decoration: none;
    }

    .pagination-container {
        display: flex;
        justify-content: center;
        margin: 3rem 0;
    }

    .pagination {
        display: flex;
        gap: 0.5rem;
        background: var(--glass-bg);
        backdrop-filter: blur(10px);
        border: 1px solid var(--glass-border);
        border-radius: 1rem;
        padding: 1rem;
        box-shadow: 0 8px 25px var(--shadow-medium);
    }

    .page-link {
        padding: 0.75rem 1rem;
        border: 1px solid var(--border-color);
        background: var(--bg-tertiary);
        color: var(--text-secondary);
        text-decoration: none;
        border-radius: 0.5rem;
        transition: all 0.3s ease;
        font-weight: 500;
    }

    .page-link:hover,
    .page-link.active {
        background: var(--primary-color);
        color: white;
        border-color: var(--primary-color);
        text-decoration: none;
        transform: translateY(-2px);
    }

    .empty-state {
        text-align: center;
        padding: 4rem 2rem;
        color: var(--text-muted);
    }

    .empty-state i {
        font-size: 4rem;
        margin-bottom: 1rem;
        color: var(--primary-color);
    }

    .empty-state h3 {
        font-size: 1.5rem;
        margin-bottom: 1rem;
        color: var(--text-secondary);
    }

    @@media (max-width: 768px) {
        .movies-header h1 {
            font-size: 2rem;
        }

        .movies-header p {
            font-size: 1rem;
        }

        .search-filter-section {
            padding: 1.5rem;
        }

        .filter-row {
            grid-template-columns: 1fr;
        }

        .movies-grid {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1.5rem;
        }

        .stats-section {
            grid-template-columns: repeat(2, 1fr);
        }
    }
</style>

<div class="movies-container">
    <!-- Header Section -->
    <div class="movies-header">
        <div class="container">
            <div class="text-center">
                <h1>üé¨ CCFilm - Kho Phim ƒê·ªânh Cao</h1>
                <p>Kh√°m ph√° th·∫ø gi·ªõi ƒëi·ªán ·∫£nh v·ªõi h√†ng ng√†n b·ªô phim ch·∫•t l∆∞·ª£ng cao</p>
            </div>
        </div>
    </div>

    <div class="container">
        <!-- Statistics Section -->
        <div class="stats-section">
            <div class="stat-card">
                <div class="stat-number">@Model.Count()</div>
                <div class="stat-label">T·ªïng s·ªë phim</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">@Model.Where(p => p.NamSanXuat >= DateTime.Now.Year - 1).Count()</div>
                <div class="stat-label">Phim m·ªõi</div>
            </div>            <div class="stat-card">
                <div class="stat-number">@Model.Where(p => p.DiemImdb.HasValue && p.DiemImdb > 0).Count()</div>
                <div class="stat-label">Phim c√≥ ƒë√°nh gi√°</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">@Model.Select(p => p.DanhMuc?.TenDanhMuc).Distinct().Count()</div>
                <div class="stat-label">Th·ªÉ lo·∫°i</div>
            </div>
        </div>

        <!-- Search and Filter Section -->
        <div class="search-filter-section">
            <form method="get">
                <div class="search-box">
                    <i class="fas fa-search search-icon"></i>
                    <input type="text" name="searchString" class="search-input" 
                           placeholder="T√¨m ki·∫øm phim theo t√™n, th·ªÉ lo·∫°i, ƒë·∫°o di·ªÖn..." 
                           value="@ViewData["CurrentFilter"]">
                </div>

                <div class="filter-row">
                    <div class="filter-group">
                        <label for="danhMucId">Th·ªÉ lo·∫°i</label>
                        <select name="danhMucId" id="danhMucId" class="filter-select">
                            <option value="">T·∫•t c·∫£ th·ªÉ lo·∫°i</option>
                            @if(ViewBag.DanhMucList != null)
                            {
                                @foreach(var danhMuc in ViewBag.DanhMucList)
                                {
                                    <option value="@danhMuc.Value" selected="@(danhMuc.Selected)">@danhMuc.Text</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="filter-group">
                        <label for="quocGiaId">Qu·ªëc gia</label>
                        <select name="quocGiaId" id="quocGiaId" class="filter-select">
                            <option value="">T·∫•t c·∫£ qu·ªëc gia</option>
                            @if(ViewBag.QuocGiaList != null)
                            {
                                @foreach(var quocGia in ViewBag.QuocGiaList)
                                {
                                    <option value="@quocGia.Value" selected="@(quocGia.Selected)">@quocGia.Text</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="filter-group">
                        <label for="namSanXuat">NƒÉm s·∫£n xu·∫•t</label>
                        <select name="namSanXuat" id="namSanXuat" class="filter-select">
                            <option value="">T·∫•t c·∫£ nƒÉm</option>
                            @for(int year = DateTime.Now.Year; year >= 1980; year--)
                            {
                                <option value="@year" selected="@(ViewData["CurrentYear"]?.ToString() == year.ToString())">@year</option>
                            }
                        </select>
                    </div>

                    <div class="filter-group">
                        <label for="sortOrder">S·∫Øp x·∫øp</label>
                        <select name="sortOrder" id="sortOrder" class="filter-select">
                            <option value="" selected="@(ViewData["CurrentSort"]?.ToString() == "")">M·∫∑c ƒë·ªãnh</option>
                            <option value="name_asc" selected="@(ViewData["CurrentSort"]?.ToString() == "name_asc")">T√™n A-Z</option>
                            <option value="name_desc" selected="@(ViewData["CurrentSort"]?.ToString() == "name_desc")">T√™n Z-A</option>
                            <option value="year_desc" selected="@(ViewData["CurrentSort"]?.ToString() == "year_desc")">NƒÉm m·ªõi nh·∫•t</option>
                            <option value="year_asc" selected="@(ViewData["CurrentSort"]?.ToString() == "year_asc")">NƒÉm c≈© nh·∫•t</option>
                        </select>
                    </div>
                </div>

                <div class="text-center">
                    <button type="submit" class="btn-search">
                        <i class="fas fa-search"></i> T√¨m ki·∫øm
                    </button>
                </div>
            </form>
        </div>

        <!-- Movies Grid -->
        @if (Model != null && Model.Any())
        {            <div class="movies-grid">
                @foreach (var phim in Model)
                {
                    <div class="movie-card" data-movie-id="@phim.MaPhim">
                        <div class="movie-poster">
                            <img src="@(!string.IsNullOrEmpty(phim.AnhPhim) ? phim.AnhPhim : "/images/no-image.jpg")" 
                                 alt="@phim.TenPhim" 
                                 onerror="this.src='/images/no-image.jpg'">
                            <div class="movie-overlay">
                                @if (!string.IsNullOrEmpty(phim.LinkPhim))
                                {
                                    <button class="play-button" onclick="event.stopPropagation(); watchMovie('@phim.MaPhim', '@phim.LinkPhim');">
                                        <i class="fas fa-play"></i>
                                    </button>
                                }
                                else
                                {
                                    <button class="play-button" disabled title="Ch∆∞a c√≥ link phim">
                                        <i class="fas fa-play"></i>
                                    </button>
                                }
                            </div>
                        </div>

                        <div class="movie-info">
                            <h3 class="movie-title">@phim.TenPhim</h3>
                            
                            <div class="movie-meta">
                                <span class="movie-year">@phim.NamSanXuat</span>
                                <div class="movie-rating">
                                    <i class="fas fa-star" style="color: #fbbf24;"></i>
                                    <span>@(phim.DiemImdb?.ToString("F1") ?? "N/A")</span>
                                </div>
                            </div>

                            @if (!string.IsNullOrEmpty(phim.MoTa))
                            {
                                <p class="movie-description">@phim.MoTa</p>
                            }

                            <div class="movie-actions">
                                @if (!string.IsNullOrEmpty(phim.LinkPhim))
                                {
                                    <button class="btn-watch" onclick="event.stopPropagation(); watchMovie('@phim.MaPhim', '@phim.LinkPhim');">
                                        <i class="fas fa-play"></i> Xem phim
                                    </button>
                                }
                                else
                                {
                                    <button class="btn-watch" disabled style="opacity: 0.5;">
                                        <i class="fas fa-play"></i> Ch∆∞a c√≥ s·∫µn
                                    </button>
                                }
                                <button class="btn-details" onclick="event.stopPropagation(); viewMovie('@phim.MaPhim');">
                                    <i class="fas fa-info-circle"></i> Chi ti·∫øt
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="empty-state">
                <i class="fas fa-film"></i>
                <h3>Kh√¥ng t√¨m th·∫•y phim n√†o</h3>
                <p>H√£y th·ª≠ ƒëi·ªÅu ch·ªânh b·ªô l·ªçc ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm</p>
            </div>
        }

        <!-- Pagination -->
        @if (ViewBag.TotalPages != null && (int)ViewBag.TotalPages > 1)
        {
            <div class="pagination-container">
                <div class="pagination">
                    @if (ViewBag.CurrentPage > 1)
                    {
                        <a href="@Url.Action("Index", new { 
                            page = (int)ViewBag.CurrentPage - 1,
                            searchString = ViewData["CurrentFilter"],
                            danhMucId = ViewData["CurrentDanhMuc"],
                            quocGiaId = ViewData["CurrentQuocGia"],
                            namSanXuat = ViewData["CurrentYear"],
                            sortOrder = ViewData["CurrentSort"]
                        })" class="page-link">
                            <i class="fas fa-chevron-left"></i> Tr∆∞·ªõc
                        </a>
                    }

                    @for (int i = 1; i <= (int)ViewBag.TotalPages; i++)
                    {
                        <a href="@Url.Action("Index", new { 
                            page = i,
                            searchString = ViewData["CurrentFilter"],
                            danhMucId = ViewData["CurrentDanhMuc"],
                            quocGiaId = ViewData["CurrentQuocGia"],
                            namSanXuat = ViewData["CurrentYear"],
                            sortOrder = ViewData["CurrentSort"]
                        })" 
                           class="page-link @(i == (int)ViewBag.CurrentPage ? "active" : "")">
                            @i
                        </a>
                    }

                    @if (ViewBag.CurrentPage < ViewBag.TotalPages)
                    {
                        <a href="@Url.Action("Index", new { 
                            page = (int)ViewBag.CurrentPage + 1,
                            searchString = ViewData["CurrentFilter"],
                            danhMucId = ViewData["CurrentDanhMuc"],
                            quocGiaId = ViewData["CurrentQuocGia"],
                            namSanXuat = ViewData["CurrentYear"],
                            sortOrder = ViewData["CurrentSort"]
                        })" class="page-link">
                            Sau <i class="fas fa-chevron-right"></i>
                        </a>
                    }
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        // Movie navigation functions
        function viewMovie(movieId) {
            // Add smooth transition effect
            document.body.style.transition = 'opacity 0.3s ease';
            document.body.style.opacity = '0.8';
            
            setTimeout(() => {
                window.location.href = `/Phim/Details/${movieId}`;
            }, 150);
        }

        function watchMovie(movieId, linkPhim) {
            // Add smooth transition effect
            document.body.style.transition = 'opacity 0.3s ease';
            document.body.style.opacity = '0.8';
            
            setTimeout(() => {
                if (linkPhim && linkPhim.trim() !== '') {
                    window.location.href = `/Phim/VideoPlayer/${movieId}`;
                } else {
                    alert('Phim n√†y ch∆∞a c√≥ s·∫µn ƒë·ªÉ xem');
                }
            }, 150);
        }

        // Smooth scroll behavior
        document.addEventListener('DOMContentLoaded', function() {
            // Add loading animation for images
            const images = document.querySelectorAll('.movie-poster img');
            images.forEach(img => {
                img.addEventListener('load', function() {
                    this.style.opacity = '1';
                });
            });

            // Add search on enter
            const searchInput = document.querySelector('.search-input');
            if (searchInput) {
                searchInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        this.closest('form').submit();
                    }
                });
            }

            // Auto-submit form when filter changes
            const filterSelects = document.querySelectorAll('.filter-select');
            filterSelects.forEach(select => {
                select.addEventListener('change', function() {
                    this.closest('form').submit();
                });
            });

            // Add click handlers for movie cards
            const movieCards = document.querySelectorAll('.movie-card');
            movieCards.forEach(card => {
                const movieId = card.getAttribute('data-movie-id');
                if (movieId) {
                    card.style.cursor = 'pointer';
                    card.addEventListener('click', function(e) {
                        // Don't trigger if clicking on buttons
                        if (!e.target.closest('.movie-actions') && !e.target.closest('.play-button')) {
                            viewMovie(movieId);
                        }
                    });
                }
            });
        });
    </script>
}
